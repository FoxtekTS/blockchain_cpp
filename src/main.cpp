#include "blockchain.h"
#include "network.h"
#include <boost/asio.hpp>


int main() {
    Blockchain myBlockchain;

    // ‚úÖ Initialisation des comptes avec 100 MTX chacun
    myBlockchain.initializeAccount("Alice");
    myBlockchain.initializeAccount("Bob");

    // ‚úÖ Ajout des transactions classiques
    myBlockchain.addBlock("Transaction 1 : Alice ‚Üí Bob");
    myBlockchain.addBlock("Transaction 2 : Bob ‚Üí Charlie");

    // ‚úÖ Effectuer des transactions en MTX
    myBlockchain.sendMTX("Alice", "Bob", 20);  // Alice envoie 20 MTX √† Bob
    myBlockchain.sendMTX("Bob", "Alice", 5);   // Bob envoie 5 MTX √† Alice

    // ‚úÖ R√©compenser un n≈ìud actif
    myBlockchain.rewardActiveNode("Alice");

    // ‚ùå P√©naliser un spammeur
    myBlockchain.penalizeSpammer("Bob");

    // ‚úÖ Afficher les blocs
    for (const Block& block : myBlockchain.chain) {
        std::cout << "Index: " << block.index << "\n";
        std::cout << "Previous Hash: " << block.previousHash << "\n";
        std::cout << "Data: " << block.data << "\n";
        std::cout << "Hash: " << block.hash << "\n";
        std::cout << "Timestamp: " << block.timestamp << "\n";
        std::cout << "---------------------------------\n";
    }

    // ‚úÖ Afficher les soldes des comptes
    std::cout << "\nüí∞ Soldes des comptes apr√®s transactions :\n";
    std::cout << "Alice : " << myBlockchain.tokenBalance["Alice"] << " MTX\n";
    std::cout << "Bob   : " << myBlockchain.tokenBalance["Bob"] << " MTX\n";

    // ‚úÖ D√©marrer le serveur P2P
    boost::asio::io_context io_context;
    Node server(io_context, 8080, myBlockchain); // Port 8080 pour le premier n≈ìud

    // ‚úÖ Configurer Tor comme proxy SOCKS5
    server.setTorProxy("127.0.0.1", 9050);

    // ‚úÖ Connecter ce n≈ìud au n≈ìud distant (externe)
    server.connectToPeer("90.126.97.57", 8080);

    // ‚úÖ Connecter ce n≈ìud √† un autre n≈ìud du r√©seau local
    server.connectToPeer("192.168.1.22", 8080);

    // ‚úÖ Connecter ce n≈ìud au r√©seau Tor
    server.connectToPeer("xrlz4artnwwgpikjh45bmfudng64he2bzwzhblbpov3xwupytwpii2yd.onion", 8080);

    server.loadPeersFromFile("peers.onion");


    io_context.run();

    return 0;
}

